# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/
<% environment.context_class.instance_eval { include PicksHelper } %>

Handlers.register 'Picks', class
  priority_to_index: <%= pick_priority_to_index_in_javascript %>
  index_to_priority: <%= pick_index_to_priority_in_javascript %>

  constructor: (el) ->
    console.log("Picks constructed")

    if window.picks_by_film_id?
      @setup_priority_divs()
      @setup_rating_divs()
      @setup_readonly_displays()
    if window.screening_ids_by_status?
      @setup_screenings()
      @register_for_updates()

  save_pick: (div, attribute, value, progress) ->
    if logged_in()
      film_id = model_id_from(div)
      pick_form = jQuery('#pick_form')
      pick_form.attr('action',
      pick_form.attr('action').replace(/\d+/, film_id))
      pick_form.find('input#attribute').val(attribute)
      pick_form.find('input#pick_' + attribute).val(value)
      progress.removeClass('obscured')
      pick_form.ajaxSubmit(
        dataType: 'script'
        success: ->
          progress.addClass('obscured')
        error: (context, xhr, e, status) ->
          progress.addClass('obscured')
          window.location = '/500.html'
      )
      true
    else
      @not_signed_in()

  setup_priority_divs: ->
    # Set up the editable priority dots
    priority_divs = jQuery('.dots')
    priority_divs.each (index, div) ->
      pick = window.picks_by_film_id[model_id_from(div)]
      if pick and pick.priority
        jQuery(div).attr('data-priority', pick.priority)
    self = this
    priority_divs.raty(
      cancel: true
      cancelHint: 'Forget this priority'
      hints: <%= pick_priority_hints_in_javascript %>
      path: '<%= File.dirname(image_path('raty/face-a.png')) %>'
      size: 18
      iconRange: [
        { range: 1, on: 'face-a.png', off: 'face-a-off.png' }
        { range: 5, on: 'face-b.png', off: 'face-b-off.png' }
      ]
      score: ->
        self.priority_to_index[jQuery(this).attr('data-priority')]
      click: (score, evt) ->
        progress_div = jQuery('#' + jQuery(this).closest('.film').attr('id') + '_progress')
        self.save_pick(this, 'priority', self.index_to_priority[score], progress_div)
    )

  setup_rating_divs: ->
    # Set up editable rating stars
    rating_divs = jQuery('.stars')
    rating_divs.each (index, div) ->
      pick = window.picks_by_film_id[model_id_from(div)]
      if pick and pick.rating
        jQuery(div).attr('data-rating', pick.rating)
    self = this
    rating_divs.raty(
      cancel: true
      cancelHint: 'Forget this rating'
      number: 5,
      hints: <%= pick_rating_hints_in_javascript %>
      path: '<%= File.dirname(image_path('raty/face-a.png')) %>'
      size: 18
      score: ->
        jQuery(this).attr('data-rating')
      click: (score, evt) ->
        progress_div = jQuery('#' + jQuery(this).closest('.film').attr('id') + '_progress')
        self.save_pick(this, 'rating', score, progress_div)
    )

  setup_readonly_displays: ->
    # Set up the non-editable display of priority or rating
    pick_symbols = jQuery('.pick_symbols')
    if pick_symbols.length > 0
      stars = '<img src="<%= image_path('raty/star-on.png') %>" />'
      first_dot = '<img src="<%= image_path('raty/face-a.png') %>" />'
      other_dots = '<img src="<%= image_path('raty/face-b.png') %>" />'
      self = this
      pick_symbols.each (index, div) ->
        pick = window.picks_by_film_id[model_id_from(div)]
        if pick
          star_count = pick.rating
          if star_count > 0
            jQuery(div).html(new Array(star_count+1).join(stars))
          else
            dot_count = self.priority_to_index[pick.priority]
            if dot_count > 0
              if dot_count == 1
                dot_html = first_dot
              else
                dot_html = new Array(dot_count + 1).join(other_dots)
              jQuery(div).html(dot_html)
            else
              jQuery(div).html('')

  setup_screenings: ->
    for status, ids of window.screening_ids_by_status
      # Apply classes to each screening in the grid
      div_ids = (ids.map (id) -> '#screening_' + id).join(',')
      jQuery(div_ids).attr('class', 'screening ' + status)

      # Screenings in lists (ie, for a film, either on the priorities page
      # or in the modal popup) have a button to add or remove it from the
      # user's schedule - set it up with the right label and data value
      action_ids = (ids.map (id) -> '#screening_' + id + '_toggle').join(',')
      self = this
      jQuery(action_ids)
        .html(if status == 'scheduled' then '-' else '+')
        .attr('data-value', status == 'scheduled')
        .off('click')
        .click (evt) ->
          button = jQuery(this)
          progress_div = jQuery('#' + jQuery(this).closest('.screening').attr('id') + '_progress')
          self.save_pick(button.closest('.film'), 'screening_id',
            if button.attr('data-value') then model_id_from(button) else null,
            progress_div)

  register_for_updates: ->
    self = this
    jQuery(document).on 'picks:updated', (event) ->
      self.setup_screenings()

  not_signed_in: ->
    alert("You're not signed in; you can sign in to manage your " +
    "schedule, or click the Sign Up link in the upper right corner " +
    "to get started.")
