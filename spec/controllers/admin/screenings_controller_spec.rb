require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::ScreeningsController, type: :controller do
  login_admin

  let(:festival) {
    create(:festival, :with_films, :with_venues, film_count: 1)
  }
  let(:venue) { festival.venues.first }
  let(:film) { festival.films.first }
  let(:valid_attributes) {
    attributes_for(:screening).merge(venue_id: venue.to_param)
  }
  let(:screening) { film.screenings.create!(valid_attributes) }

  describe "GET new" do
    it "assigns a new screening as @screening, plus @film & @festival" do
      get :new, { film_id: film.to_param }
      assigns(:screening).should be_a_new(Screening)
      assigns(:film).should eq(film)
      assigns(:festival).should eq(festival)
    end
  end

  describe "GET edit" do
    it "assigns the requested screening as @screening" do
      get :edit, {:id => screening.to_param}
      assigns(:screening).should eq(screening)
      assigns(:film).should eq(film)
      assigns(:festival).should eq(festival)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Screening" do
        expect {
          post :create, {
            :film_id => film.to_param,
            :screening => valid_attributes
          }
        }.to change(Screening, :count).by(1)
      end

      it "assigns a newly created screening as @screening" do
        post :create, {
          :film_id => film.to_param,
          :screening => valid_attributes
        }
        assigns(:screening).should be_a(Screening)
        assigns(:screening).should be_persisted
      end

      it "redirects back to the new screening page" do
        post :create, {
            :film_id => film.to_param,
            :screening => valid_attributes
        }
        response.should redirect_to(new_admin_film_screening_url(film,
                                      starts_at: Screening.last.starts_at,
                                      venue_id: venue.to_param))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved screening as @screening" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Screening).to receive(:save).and_return(false)
        post :create, {
            :film_id => film.to_param,
            :screening => { "starts_at" => "" }
        }
        assigns(:screening).should be_a_new(Screening)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, {
            :film_id => film.to_param,
            :screening => { "starts_at" => "" }
        }
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested screening" do
        # Assuming there are no other screenings in the database, this
        # specifies that the Screening created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        allow_any_instance_of(Screening).to receive(:update_attributes).
                                            with("press" => false)
        put :update, {:id => screening.to_param,
                      :screening => { "press" => false}}
      end

      it "assigns the requested screening as @screening" do
        put :update, {:id => screening.to_param, :screening => valid_attributes}
        assigns(:screening).should eq(screening)
      end

      it "redirects to the film page" do
        put :update, {:id => screening.to_param, :screening => valid_attributes}
        response.should redirect_to([:admin, film])
      end
    end

    describe "with invalid params" do
      it "assigns the screening as @screening" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Screening).to receive(:save).and_return(false)
        put :update, {:id => screening.to_param, :screening => { "starts_at" => "" }}
        assigns(:screening).should eq(screening)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        put :update, {:id => screening.to_param, :screening => { "starts_at" => "" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested screening" do
      screening # force creation
      expect {
        delete :destroy, {:id => screening.to_param}
      }.to change(Screening, :count).by(-1)
    end

    it "redirects to the film page" do
      delete :destroy, {:id => screening.to_param}
      response.should redirect_to([:admin, film])
    end
  end

end
